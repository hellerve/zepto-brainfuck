(define (overunder byte)
    (modulo byte 256))

(define SIZE 30000)
(define DEBUG #f)

(define (bf str)
    (let loop
         ((ptr 0)
          (tape (make-vector 30000 0))
          (i 0)
          (len (length str)))
    (if (>= i len)
        (nil)
        (case (string:ref str i)
            ((#\>) (loop (add1 ptr) tape (add1 i) len))
            ((#\<) (loop (sub1 ptr) tape (add1 i) len))
            ((#\+) (loop ptr (vector:set! tape ptr (overunder (add1 (tape ptr)))) (add1 i) len))
            ((#\-) (loop ptr (vector:set! tape ptr (overunder (sub1 (tape ptr)))) (add1 i) len))
            ((#\.) (begin
                (display (string (integer->char (tape ptr))) :flush)
                (loop ptr tape (add1 i) len)))
            ((#\,) (let
                ((c (overunder (read-char integer->char (tape ptr)))))
                (loop ptr (vector:set! tape ptr c) (add1 i) len)))
            ((#\[)
                (if (eq? 0 (tape ptr))
                    (let iloop
                         ((skip 0)
                          (tmp i)
                          (i (add1 i)))
                      (if (>= i len)
                        (nil)
                        (case (string:ref str i)
                            (("[") (iloop (add1 skip) tmp (add1 i)))
                            (("]")
                                (if (> skip 0)
                                    (iloop (sub1 skip) tmp (add1 i)))
                                    (loop ptr tape tmp len))
                            (else (iloop skip tmp (add1 i))))))
                      (loop ptr tape (add1 i) len)))
            ((#\])
                (if (> (tape ptr) 0)
                    (let iloop
                        ((skip 0)
                         (i (sub1 i)))
                      (case (string:ref str i)
                        ((#\]) (iloop (sub1 skip) (add1 i)))
                        ((#\[)
                            (if (> skip 0)
                                (iloop (sub1 skip) (sub1 i))
                                (loop ptr tape i len)))
                        (else (iloop skip (sub1 i)))))
                    (loop ptr tape (add1 i) len)))
            (else (if DEBUG (display (string:ref str i) :flush) (loop ptr tape (add1 i) len)))))))

(bf (read-contents (car zepto:args)))
